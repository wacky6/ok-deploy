#!/bin/bash

set -euo pipefail

VERSION_TAG=release-1.1pre18
DIR="tinc-$VERSION_TAG"
PREFIXES="--prefix=/usr --exec-prefix=/usr --sysconfdir=/etc --localstatedir=/var"
GCC_FLAGS="-g -march=x86-64 -O3 -fPIE \
  -Wall -Wconversion -fwrapv \
  -fstack-protector-strong \
  -DFORTIFY_SOURCE=2"
IDENTITY_FILE="/root/.ssh/id_ed25519_tinc_config"

CORES=`grep -c processor < /proc/cpuinfo`
MAKE_OPTS=-j${CORES}
INSTALL='apt install --no-install-recommends -y'

SYSTEMD_UNIT_PATH=/usr/lib/systemd/system

$INSTALL build-essential autoconf automake git curl sed ssh-tools \
         readline-common libreadline-dev libncurses-dev \
         zlib1g-dev liblzo2-dev

( cd /tmp ;
  rm -rf $DIR ;
  git clone --depth 1 --branch $VERSION_TAG https://github.com/gsliepen/tinc.git $DIR
  cd $DIR
  autoreconf -fsi \
  && CFLAGS="$GCC_FLAGS" CXXFLAGS="$GCC_FLAGS" \
    ./configure $PREFIXES \
    --with-systemd=$SYSTEMD_UNIT_PATH \
    --disable-legacy-protocol \
  && sed -i 's/^MAKEINFO = .*$/MAKEINFO = true/' ./doc/Makefile \
  && make $MAKE_OPTS \
  && make install
)

# patch systemd unit file to include PID and log file
if ! grep -qe '--pidfile=/var/run/tinc.%i.pid' ${SYSTEMD_UNIT_PATH}/tinc@.service ; then
    sed -i '/^ExecStart=/ s/$/ --pidfile=\/var\/run\/tinc.%i.pid --logfile=\/var\/log\/tinc.%i.log/' ${SYSTEMD_UNIT_PATH}/tinc@.service
    echo "systemd unit file patched."
else
    echo "systemd unit file already has pidfile"
fi

# check tinc-config deployment key, generate one if necessary
if [ ! -f ${IDENTITY_FILE}.pub ]; then
    echo "pubkey doesn't exist, generating..."
    ssh-keygen -t ed25519 -f ${IDENTITY_FILE} -N ''
    echo ""
else
    echo "pubkey found."
fi

GIT_SSH_COMMAND="ssh -i $IDENTITY_FILE \
  -o StrictHostKeyChecking=no \
  -o IdentitiesOnly=yes \
  -o UserKnownHostsFile=/dev/null"

export GIT_WITH_CRED="GIT_SSH_COMMAND='$GIT_SSH_COMMAND' git"

# generate config if necessary
if [ ! -d /etc/tinc/overlay ]; then
    echo "###### Add the following to tinc-config repo deployment key (with write access)"
    echo ""
    cat ${IDENTITY_FILE}.pub
    echo ""
    echo "###### Press enter when complete"
    read -p "  Waiting for Enter > "

    # pull in overlay config
    echo "Pulling tinc-config..."
    mkdir -p /etc/tinc
    ( cd /etc/tinc; \
      eval $GIT_WITH_CRED clone git@github.com:wacky6/tinc-config \
        --branch overlay --depth 1 overlay;
    )

    # start tinc-config's config script
    while true; do
        echo ""
        echo "###### Run tinc-config..."
        ( cd /etc/tinc/overlay; ./config.sh )
        echo "###### Is the above configuration correct?"
        read -p "  yes or no > " resp
        if [[ $resp =~ y|Y|yes ]]; then
            echo "Config confirmed."
        break
        fi
    done

    # push tinc to upstream
    echo "###### Pushing to upstream"
    ( cd /etc/tinc/overlay; \
      $GIT_WITH_CRED config user.email "$(hostname)-admin@wacky.one"; \
      $GIT_WITH_CRED config user.name "$(hostname)"; \
      $GIT_WITH_CRED add hosts/; \
      $GIT_WITH_CRED commit -m "add $( hostname )"; \
      $GIT_WITH_CRED push origin overlay;
    )
else
    echo "tinc-config exists, skipping."
fi


if [ -f /etc/init.d/tinc-1.1 ]; then
  echo "###### Mirgate Legacy Config"
  systemctl stop tinc-1.1 || echo "tinc-1.1 service already stopped."
  systemctl disable tinc-1.1 || echo "tinc-1.1 service already disabled."
  rm -f /etc/init.d/tinc-1.1 && echo "tinc-1.1 init script removed."
fi

# enable and start tinc
echo "###### Adding to systemd"
systemctl daemon-reload
systemctl enable tinc@overlay
systemctl enable tinc
systemctl start tinc

echo "**** Complete ****"
echo "path: $( which tincd )"
tincd --version | head -n1
