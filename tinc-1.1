#!/bin/bash

FILE=tinc-1.1pre17.tar.gz
DIR=`basename $FILE .tar.gz`
PREFIXES="--prefix=/usr --exec-prefix=/usr --sysconfdir=/etc --localstatedir=/var"

CORES=`grep -c processor < /proc/cpuinfo`
MAKE_OPTS=-j${CORES}
INSTALL='apt install --no-install-recommends -y'
REMOVE='apt remove -y'
AUTOREMOVE='apt autoremove -y'

SYSTEMD_UNIT_PATH=/usr/lib/systemd/system

$INSTALL build-essential git curl \
         zlib1g-dev libssl-dev \
         readline-common libreadline-dev \
         ncurses-base ncurses-bin libncurses-dev \
         liblzo2-2 liblzo2-dev sed texinfo

curl https://tinc-vpn.org/packages/$FILE | tar xz -C /tmp

( cd /tmp/$DIR ; \
  CFLAGS='-march=native' ./configure $PREFIXES --with-systemd=$SYSTEMD_UNIT_PATH \
  && make $MAKEOPTS \
  && make install \
  && $REMOVE texinfo \
  && $AUTOREMOVE \
)

# patch systemd unit file to include PID and log file
if ! grep -qe '--pidfile=/var/run/tinc.%i.pid' ${SYSTEMD_UNIT_PATH}/tinc@.service ; then
    sed -i '/^ExecStart=/ s/$/ --pidfile=\/var\/run\/tinc.%i.pid --logfile=\/var\/log\/tinc.%i.log/' ${SYSTEMD_UNIT_PATH}/tinc@.service
    echo "systemd unit file patched."
else
    echo "systemd unit file already has pidfile"
fi

# check pubkey, it needs to be tinc-config's deployment key
if [ ! -f /root/.ssh/id_rsa.pub ]; then
    echo "pubkey does not exist, generating..."
    ssh-keygen -f /root/.ssh/id_rsa -N ''
    echo ""
else
    echo "pubkey found."
fi

# generate config if necessary
if [ ! -f /etc/tinc/overlay/tinc.conf ]; then
    echo "###### Add the following to tinc-config deployment key (write access)"
    echo ""
    cat /root/.ssh/id_rsa.pub
    echo ""
    echo "###### Press enter when complete"
    read -p "  Waiting for Enter > "

    # pull in overlay config
    echo "Pulling tinc-config..."
    mkdir -p /etc/tinc
    ( cd /etc/tinc; \
      git clone git@github.com:wacky6/tinc-config --branch overlay --depth 1 overlay;
    )

    # start tinc-config's config script
    while true; do
        echo ""
        echo "###### Run tinc-config..."
        ( cd /etc/tinc/overlay; ./config.sh )
        echo "###### Is the above configuration correct?"
        read -p "  yes or no > " resp
        if [[ $resp =~ y|Y|yes ]]; then
            echo "Config confirmed."
        break
        fi
    done

    # push tinc to upstream
    echo "###### Pushing to upstream"
    ( cd /etc/tinc/overlay; \
      git config user.email "$(hostname)-admin@wacky.one"; \
      git config user.name "$(hostname)"; \
      git add hosts/; \
      git commit -m "add $( hostname )"; \
      git push origin overlay;
    )
else
    echo "tinc-config exists, skipping."
fi


if [ -f /etc/init.d/tinc-1.1 ]; then
  echo "###### Mirgate Legacy Config"
  systemctl stop tinc-1.1 || echo "tinc-1.1 service already stopped."
  systemctl disable tinc-1.1 || echo "tinc-1.1 service already disabled."
  rm -f /etc/init.d/tinc-1.1 && echo "tinc-1.1 init script removed."
fi

# enable and start tinc
echo "###### Adding to systemd"
systemctl daemon-reload
systemctl enable tinc@overlay
systemctl start tinc@overlay

echo "**** Complete ****"
echo "path: $( which tincd )"
tincd --version | head -n1

